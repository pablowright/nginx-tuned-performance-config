# This config:
# PRW: MODIFICATIONS tuning NGINX performance for sending out STB (Set Top Box) updates (approx 150 MB file size). 
# Linux CentOS 7 server. 4 CPUs (Xeon 2.80GHz) 8 GB RAM. 10Gb network. Main function is to upgrade about 400,000 client 
# devices in a short amount of time.
# Notes and mods added by -prw 06-2018:
# After making changes restart nginx: 'systemctl stop|start|restart nginx'


user  nginx;

# PRW: default value:
# worker_processes  1;
# PRW MOD: Set it to the number of CPUs [CONSERVATIVE] (4 on THIS server) or let NGINX calculate it automatically.
# NGINX will set this number to 4 (number of CPUs) if set to auto:
worker_processes  auto;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

# PRW: Changes the limit on the maximum number of open files (RLIMIT_NOFILE) for worker processes:
# If this is not set, the OS settings will be used which is 1024 by default. Based on "worker_connections" directive settings
# you may receive: "nginx: [warn] 4000 worker_connections exceed open file resource limit: 1024" warning message if you do not
# adjust this number.
worker_rlimit_nofile 100000;

events {
    # PRW: Determines how many clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)

    worker_connections  4000;

    # PRW: For this server/config: 4 worker_processes * 4000 worker_connections = 16000 clients per second.
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;
    # PRW: we could boost I/O on the HDDs if we  disable access logging:
    # access_log off;

# PRW: Default for 'sendfile' is 'on'
    sendfile        on;

# PRW: Set tcp_nopush. This enables NGINX to send HTTP response headers in one packet right after the chunk of data has been obtained
# by sendfile().
    tcp_nopush     on;

# PRW: Allow the server to close connection on non responding client, this will free up memory:
    reset_timedout_connection on;

# PRW: request timed out -- default 60
    client_body_timeout 10;

# PRW: If client stops responding, free up memory -- default 60
    send_timeout 2;

# PRW: server will close connection after this time -- default 75
    keepalive_timeout  30;

# PRW: gzip in set to 'on' by default. Also by default, Nginx compresses only HTML files. Every other file will be served uncompressed
# unless configured otherwise.
    #gzip  on;

    include /etc/nginx/conf.d/*.conf;

# PRW: Tuning server for connection performance. See next note:

    server {
        listen 80 backlog=4096;
    }

}

# PRW: Optimizing the Backlog Queue: The general rule is when a connection is established, it is put into the “listen” queue of a
# listen socket.
# Under normal load, either the queue is small or there is no queue at all. But under high load, the queue can grow dramatically,
# resulting in uneven performance, dropped connections, and increased latency.
# command: 'netstat -Lan' will display the current listen queue.
#
# PRW: Tuning the Operating System:
# Increase the value of the net.core.somaxconn kernel parameter from its default value (128) to a value high enough for a large burst
# of traffic. PRW: set this value to 4096 by adding the following line to /etc/sysctl.conf: net.core.somaxconn = 4096
#
# PRW: Since somaxconn kernel parameter is now set to a value greater than 512, we need to change the backlog parameter in the
# NGINX listen directive. See 'server {' directive, above.

# EOF
